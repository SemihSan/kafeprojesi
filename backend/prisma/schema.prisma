// Prisma schema for QR-based Cafe Ordering System
// SQLite datasource; can be swapped to PostgreSQL/MySQL later

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Users table for admin, waiter, kitchen roles
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   // OWNER, WAITER, KITCHEN
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Physical tables in the cafe
model CafeTable {
  id           String      @id @default(cuid())
  name         String      @unique
  status       String      @default("EMPTY") // EMPTY, OCCUPIED, MERGED
  // If merged, this field points to the main table id
  mergedIntoId String?
  mergedInto   CafeTable?  @relation("MergedInto", fields: [mergedIntoId], references: [id])
  mergedTables CafeTable[] @relation("MergedInto")
  orders       Order[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Menu categories (e.g., Drinks, Desserts)
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Products on the menu
model Product {
  id         String      @id @default(cuid())
  name       String
  priceCents Int // store in cents to avoid float errors
  inStock    Boolean     @default(true)
  categoryId String?
  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([name])
}

// Orders placed by tables
model Order {
  id         String      @id @default(cuid())
  tableId    String
  table      CafeTable   @relation(fields: [tableId], references: [id])
  status     String      @default("PENDING") // PENDING, CONFIRMED, PREPARING, READY, SERVED, CANCELLED
  items      OrderItem[]
  totalCents Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Items inside orders
model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  priceCents Int // snapshot of product price at order time
}
